[{"type": "Image", "element_id": "eac5991fb5bd6ef74143973969506c46", "text": "Output Probabilities Add & Norm, Feed Forward Add & Norm Multi-Head Attention Nx Masked Multi-Head Attention Positional \u2018 A) Positional Encoding OY Encoding Inputs Outputs (shifted right) Figure 1: The Transformer - model architecture. wise fully connected feed-forward network. We employ a residual connection [10] around each of the two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is LayerNorm(z + Sublayer(z)), where Sublayer(z) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension dmodey = 512. Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position \u00a2 can depend only on the known outputs at positions less than i. 3.2 Attention An attention function can be described as mapping a query and a set of key-value pairs to an output, vhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the uery with the corresponding key, 2.1 Scaled Dot-Product Attention e call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of eries and keys of dimension dj, and values of dimension dy. We compute the dot products of the", "metadata": {"coordinates": {"points": [[132.24541666666667, 0.0], [132.24541666666667, 2213.8888888888887], [1520.5323333333333, 2213.8888888888887], [1520.5323333333333, 0.0]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 1, "image_path": "unstructured_scanned_pdf_images/figure-1-1.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Image", "element_id": "78e0df6a83eb59fc682be4b64dea11dd", "text": "69", "metadata": {"coordinates": {"points": [[1347.2222222222222, 2252.777777777778], [1347.2222222222222, 2313.8888888888887], [1408.3333333333333, 2313.8888888888887], [1408.3333333333333, 2252.777777777778]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 1, "image_path": "unstructured_scanned_pdf_images/figure-1-2.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Title", "element_id": "98e953c6b60fe0a9b805d68eedcccc8e", "text": "CamScanner", "metadata": {"coordinates": {"points": [[1416.6666666666665, 2268.947222222222], [1416.6666666666665, 2305.0583333333334], [1601.1944444444443, 2305.0583333333334], [1601.1944444444443, 2268.947222222222]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 1, "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Image", "element_id": "f693badb30ed6908a22479364cfea64b", "text": "Multi-Head Attention Scaled Dot-Product Attention (vou J (Servos J Mask (opt) Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel. query with all keys, divide each by \\/d,, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneous! 7 ly, packed together into a matrix Q. The keys and values are also packed together into matrices K and v. We peas the matrix of outputs as: KT on (1) The two most commonly used attention functions are additive attention [2], and dot-product (multi- Plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of 7-- Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code. Attention(Q, K, V) = softmax( While for small values of dj, the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d;, [3]. We suspect that for large values of d,,, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients *. To counteract this effect, we scale the dot products by 73-. 3.2.2 Multi-Head Attention Instead of performing a single attention function with dmodet-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to dj, d, and d, dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d,-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2. Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this. ee ate ere et ree \u201cTo illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, q - k= ve, qiki, has mean 0 and variance dx.", "metadata": {"coordinates": {"points": [[38.77630555555555, 0.0], [38.77630555555555, 2213.8888888888887], [1614.0014444444444, 2213.8888888888887], [1614.0014444444444, 0.0]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 2, "image_path": "unstructured_scanned_pdf_images/figure-2-3.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Image", "element_id": "57851b049988eca3be99768ee288f2c8", "text": "69", "metadata": {"coordinates": {"points": [[1347.2222222222222, 2252.777777777778], [1347.2222222222222, 2313.8888888888887], [1408.3333333333333, 2313.8888888888887], [1408.3333333333333, 2252.777777777778]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 2, "image_path": "unstructured_scanned_pdf_images/figure-2-4.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Title", "element_id": "074d5e9ef116b014b9ebf648a6bed3c6", "text": "CamScanner", "metadata": {"coordinates": {"points": [[1416.6666666666665, 2268.947222222222], [1416.6666666666665, 2305.0583333333334], [1601.1944444444443, 2305.0583333333334], [1601.1944444444443, 2268.947222222222]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 2, "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Image", "element_id": "23405aca112c0395406f88cdaf1af057", "text": "MultiHead(Q, K,V) = Concat(heady,..., head,)W\u00b0 where head; = Attention(QW,?, KW, VW) Where the projections are parameter matrices W9 \u20ac R\u00e9wmX4s, WK \u20ac RomaXde, WY \u00a9 Rta Xdy and WO \u20ac Rhdexdesss, In this work we employ h = 8 parallel attention layers, or heads. For each of these we use d = dy = drodei/h = 64. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. 3.2.3 Applications of Attention in our Model The Transformer uses multi-head attention in three different ways: \u00a9 In \"encoder-decoder attention\u201d layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as (31, 2, 8]. The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder. \u00a2 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to \u2014-o) all values in the input of the softmax which correspond to illegal connections. See Figure 2. 3.3 Position-wise Feed-Forward Networks In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between. FFN(z) = max(0,2W, + b1)W2 + bz (2) While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output is dmogey = 512, and the inner-layer has dimensionality dy f= 2048, 3.4 Embeddings and Softmax Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmode. We also use the usual learned linear transfor- mation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [24]. In the embedding layers, we multiply those weights by V/dmouei- 3.5 Positional Encoding Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \u201cpositional encodings\" to the input embeddings at the", "metadata": {"coordinates": {"points": [[82.77275, 0.0], [82.77275, 2213.8888888888887], [1570.0050555555556, 2213.8888888888887], [1570.0050555555556, 0.0]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 3, "image_path": "unstructured_scanned_pdf_images/figure-3-5.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}, {"type": "Image", "element_id": "89e7b2961452ef8cca7fd3c15648cdf4", "text": "", "metadata": {"coordinates": {"points": [[1347.2222222222222, 2252.777777777778], [1347.2222222222222, 2313.8888888888887], [1408.3333333333333, 2313.8888888888887], [1408.3333333333333, 2252.777777777778]], "system": "PixelSpace", "layout_width": 1653, "layout_height": 2339}, "last_modified": "2025-03-15T12:02:48", "filetype": "application/pdf", "languages": ["eng"], "page_number": 3, "image_path": "unstructured_scanned_pdf_images/figure-3-6.jpg", "file_directory": "scanned_pdf_data", "filename": "4.pdf"}}]